/**
 * harvey (c) 2011
 */
package com.harvey
package service
package random

import scalaz._, Scalaz._

/**
 * a random variate is an outcome of a random variable. this trait represents
 * a variate method which is used to achieve such an outcome. for example, a
 * random variate may be generated by a table lookup method, inversion method,
 * etc. thus we provide these methods here
 */
trait VariateMethod[A] {
  def apply: A
}

object VariateMethod {
  implicit def IntTableMethod(implicit p: ProbabilitySpace[Int]): VariateMethod[Int] = {
    new VariateMethod[Int] with TableUtil[Int] {
      private[this] val table = init(p)
      def apply = lookup(table)(implicitly[Generator[Uniform]].generate)
    }
  }
  implicit def DoubleTableMethod(implicit p: ProbabilitySpace[Double]): VariateMethod[Double] = {
    new VariateMethod[Double] with TableUtil[Double] {
      private[this] val table = init(p)
      def apply = lookup(table)(implicitly[Generator[Uniform]].generate)
    }
  }

  trait TableUtil[A] {
    def init = {
      for {
        a <- decimals
        b <- fillTable
      } yield (() => a) map b
    }
    def decimals: ProbabilitySpace[A] => Int = {
      p => p.sampleSpace.foldLeft(0) { (b,a) =>
        val x = p.measure(a).toString.length-2
        if (x > b) x else b
      }
    }
    def fillTable: ProbabilitySpace[A] => Int => List[A] = {
      p => n => p.sampleSpace.map { x => 
        List.fill((p.measure(x) * math.pow(10.0,n.toDouble)).toInt)(x)
      }.flatten
    }
    def lookup: (() => List[A]) => Uniform => A = {
      as => u => u match {
        case Uniform(x) => as()((as().size * x).toInt)
      }
    }
  }
}
