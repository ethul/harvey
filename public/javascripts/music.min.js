/*
 *  MUSIC.js - a music creation library containing functions and data sets to generate notes, intervals, chords, scales, ...
 *  (currently for twelve-tone equal temperament tuning only)
 *
 *  developed by Greg Jopa and Piers Titus 
 *
 */function Note(a){this.coord=a}function Interval(a){this.coord=a}function add_addsubtract_func(a){return a.add=function(a){var b=new Array;for(var c in this)typeof this[c]=="object"&&(b[c]=this[c].add(a));return add_addsubtract_func(b),b},a.subtract=function(a){var b=new Array;for(var c in this)typeof this[c]=="object"&&(b[c]=this[c].subtract(a));return add_addsubtract_func(b),b},a}var MUSIC={notes:{Fb:[6,-10],Cb:[5,-9],Gb:[5,-8],Db:[4,-7],Ab:[4,-6],Eb:[3,-5],Bb:[3,-4],F:[2,-3],C:[1,-2],G:[1,-1],D:[0,0],A:[0,1],E:[-1,2],B:[-1,3],"F#":[-2,4],"C#":[-3,5],"G#":[-3,6],"D#":[-4,7],"A#":[-4,8],"E#":[-5,9],"B#":[-5,10]},baseFreq:440,baseOffset:[4,1],intervals:{unison:[0,0],"minor second":[3,-5],"major second":[-1,2],"minor third":[2,-3],"major third":[-2,4],fourth:[1,-1],"augmented fourth":[-3,6],tritone:[-3,6],"diminished fifth":[4,-6],fifth:[0,1],"minor sixth":[3,-4],"major sixth":[-1,3],"minor seventh":[2,-2],"major seventh":[-2,5],octave:[1,0]},intervals_semitones:{1:[3,-5],2:[-1,2],3:[2,-3],4:[-2,4],5:[1,-1],6:[-3,6],7:[0,1],8:[3,-4],9:[-1,3],10:[2,-2],11:[-2,5]},scales:{major:["major second","major third","fourth","fifth","major sixth","major seventh"],"natural minor":["major second","minor third","fourth","fifth","minor sixth","minor seventh"],"harmonic minor":["major second","minor third","fourth","fifth","minor sixth","major seventh"],"major pentatonic":["major second","major third","fifth","major sixth"],"minor pentatonic":["minor third","fourth","minor sixth","minor seventh"]}};Note.prototype.frequency=function(){return MUSIC.baseFreq*Math.pow(2,(this.coord[0]*1200+this.coord[1]*700)/1200)},Note.prototype.accidental=function(){return Math.round((this.coord[1]+MUSIC.baseOffset[1])/7)},Note.prototype.octave=function(){var a=this.accidental();return this.coord[0]+MUSIC.baseOffset[0]+4*a+Math.floor((this.coord[1]+MUSIC.baseOffset[1]-7*a)/2)},Note.prototype.latin=function(){var a=["F","C","G","D","A","E","B"],b=["bb","b","","#","x"],c=this.accidental();return a[this.coord[1]+MUSIC.baseOffset[1]-c*7+3]+b[c+2]},Note.fromLatin=function(a){var b=a.split(/(\d+)/);if(b.length>3){var c=new Array,d=0;for(var e=0;e<(b.length-1)/2;e++){var f=MUSIC.notes[b[d]];f=[f[0]+parseInt(b[d+1]),f[1]],f[0]-=MUSIC.baseOffset[0],f[1]-=MUSIC.baseOffset[1],c[e]=new Note(f),d+=2}return c}var f=MUSIC.notes[b[0]];return f=[f[0]+parseInt(b[1]),f[1]],f[0]-=MUSIC.baseOffset[0],f[1]-=MUSIC.baseOffset[1],new Note(f)},Note.prototype.scale=function(a){var b=MUSIC.scales[a],c=new Array;c.push(this.add("unison"));for(var d=0;d<b.length;d++)c[d+1]=this.add(Interval.fromName(b[d]));return c.push(this.add("octave")),c},Note.prototype.add=function(a){typeof a=="string"&&(a=Interval.fromName(a));if(a.length){var b=new Array;for(var c=0;c<a.length;c++)b[c]=this.add(a[c]);return add_addsubtract_func(b),b}return new Note([this.coord[0]+a.coord[0],this.coord[1]+a.coord[1]])},Note.prototype.subtract=function(a){typeof a=="string"&&(a=Interval.fromName(a));if(a.length){var b=new Array;for(var c=0;c<a.length;c++)b[c]=this.subtract(a[c]);return add_addsubtract_func(b),b}var d=[this.coord[0]-a.coord[0],this.coord[1]-a.coord[1]];return typeof a.frequency=="function"?new Interval(d):new Note(d)},Interval.fromName=function(a){return new Interval(MUSIC.intervals[a])},Interval.fromSemitones=function(a){return new Interval(MUSIC.intervals_semitones[a])},Interval.fromTonesSemitones=function(a){return new Interval([a[0]*-1+a[1]*3,a[0]*2+a[1]*-5])},Interval.prototype.tone_semitone=function(){return[this.coord[0]*5+this.coord[1]*3,this.coord[0]*2+this.coord[1]*1]},Interval.prototype.semitone=function(){var a=this.tone_semitone();return a[0]*2+a[1]},Interval.prototype.add=function(a){return typeof a=="string"&&(a=Interval.fromName(a)),new Interval([this.coord[0]+a.coord[0],this.coord[1]+a.coord[1]])},Interval.prototype.subtract=function(a){return typeof a=="string"&&(a=Interval.fromName(a)),new Note([this.coord[0]-a.coord[0],this.coord[1]-a.coord[1]])};